#!/usr/bin/env sh
#This file is part of packages. It is subject to the license terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/packages/master/COPYRIGHT. No part of packages, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
#Copyright Â© 2016 The developers of packages. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/packages/master/COPYRIGHT.


set -e
set -u
set -f

program_name="checkout-submodules-to-master"

_program_path_find()
{
	if [ "${0%/*}" = "$0" ]; then

		# We've been invoked by the interpreter as, say, bash program
		if [ -r "$0" ]; then
			pwd -P
		# Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
		else
			printf '\n'
		fi

	else

		# We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)

		_program_path_find_parentPath()
		{
			parentPath="${scriptPath%/*}"
			if [ -z "$parentPath" ]; then
				parentPath='/'
			fi
			cd "$parentPath" 1>/dev/null
		}

		# pdksh / mksh have problems with unsetting a variable that was never set...
		if [ "${CDPATH+set}" = 'set' ]; then
			unset CDPATH
		fi

		if command -v realpath 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$(realpath "$0")"

				_program_path_find_parentPath
				pwd -P
			)
		elif command -v readlink 1>/dev/null 2>/dev/null; then
			(
				local recursionDepth=0
				_program_path_resolve_symlinks_recursively()
				{
					local unresolvedPath="$1"
					
					recursionDepth=$((recursionDepth + 1))
					
					if [ $recursionDepth -gt 10 ]; then
						printf '%s\n' 'Recursion to depths greater than 10 is not allowed when resolving links.'
						return 1
					fi
					
					local potentialLinkDestination="$(readlink -- "$unresolvedPath")"
					
					if [ -z "$potentialLinkDestination" ]; then
						scriptPath="$unresolvedPath"
						return 0
					fi
					local linkDestination="$potentialLinkDestination"
					local parentFolderPath="${unresolvedPath%/*}"
					
					if [ "$parentFolderPath" = "$unresolvedPath" ]; then
						_program_path_resolve_symlinks_recursively "$linkDestination"
					else
						case "$linkDestination" in
														
							/*)
								_program_path_resolve_symlinks_recursively "$linkDestination"
							;;
							
							*)
								_program_path_resolve_symlinks_recursively "$parentFolderPath"/"$linkDestination"
							;;
							
						esac
					fi
				}

				scriptPath="$0"
				_program_path_resolve_symlinks_recursively "$scriptPath"

				_program_path_find_parentPath
				pwd -P
			)
		else
			# This approach will fail in corner cases where the script itself is a symlink in a path not parallel with the concrete script
			(
				scriptPath="$0"

				_program_path_find_parentPath
				pwd -P
			)
		fi

	fi
}

fail()
{
	local exitCode="$1"
	local message="$2"
	
	printf '%s:FAIL:%s\n' "$program_name" "$message" 1>&2
	exit $exitCode
}

depends()
{
	local binary
	for binary in "$@"
	do
		if ! command -v "$binary" 1>/dev/null 2>/dev/null; then
			local EX_OSFILE=72
			fail $EX_OSFILE "The binary `$binary` is not on the PATH"
		fi
	done
}

depends git
checkout_submodules_to_master_main()
{
	cd "$(_program_path_find)" 1>/dev/null 2>/dev/null

	git submodule update --init --recursive

	local folder
	set +f
	for folder in *
	do
		set -f
		if [ ! -s "$folder"/.git ]; then
			continue
		fi
		if [ -L "$folder" ]; then
			continue
		fi

		printf 'Checking out submodule %s\n' "$folder" 1>&2
		git -C "$folder" checkout master

		printf 'Repairing submodule (reset) %s in case of interrupted clone\n' "$folder" 1>&2
		git -C "$folder" reset HEAD -- .

		printf 'Repairing submodule (checkout) %s in case of interrupted clone\n' "$folder" 1>&2
		git -C "$folder" checkout -- .

		if [ -s "$folder"/.libertine-linux-upstream ]; then
			local tab='	'
			local submodule
			local upstreamGitUrl
			while IFS="$tab" read -r submodule upstreamGitUrl
			do
				if [ ! -d "$folder"/"$submodule" ]; then
					continue
				fi
				git -C "$folder"/"$submodule" remote add upstream "$upstreamGitUrl" || true
			done <"$folder"/.libertine-linux-upstream
		fi
	done
	set -f
}

checkout_submodules_to_master_main "$@"
